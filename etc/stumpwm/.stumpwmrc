;; -*- lisp -*-
(in-package :stumpwm)

;;
;; Startup commands -----------------------------------------------------------
;;

(run-shell-command "xsetroot -solid grey30")

;;
;; Swank server for SLIME interaction -----------------------------------------
;;

(require :swank)
(swank-loader:init)
(swank:create-server :port 4004
                     :style swank:*communication-style*
                     :dont-close t)

;;
;; Miscellaneous --------------------------------------------------------------
;;

(setf
 *message-window-gravity* :center
 *mouse-focus-policy* :sloppy
 (getenv "GDK_CORE_DEVICE_EVENTS") "1" ; fix for GTK3
 *window-border-style* :none)

(grename "1")
(gnewbg "2")
(gnewbg "3")
(gnewbg "4")
(gnewbg-float "5")
(gnewbg-float "6")

;;
;; Contrib --------------------------------------------------------------------
;;

(load-module "swm-gaps")
(setf swm-gaps:*inner-gaps-size* 8)
(swm-gaps:toggle-gaps)

(load-module "pass")

(load-module "cpu")
(setf cpu:*acpi-thermal-zone*  ; use more reliable CPU package temp
      '(:sysfs . #P"/sys/devices/virtual/thermal/thermal_zone2/temp"))

(load-module "mem")

(set-font "xos4 Terminus") ; don't need ttf contrib for bitmap fonts

;;
;; Modeline -------------------------------------------------------------------
;;

(defun get-wifi ()
  (string-trim
   (string #\newline)
   (run-shell-command "iw wlp4s0 station dump | awk '/signal:/{ print $2 }'"
		      t)))

(defun get-volume ()
  (string-trim
   (string #\newline)
   (run-shell-command "amixer get Master | awk '/Mono/{ printf $4 }' | tr -d '[]'"
		      t)))

(setf
 *window-format* "%m%s%c"
 *group-format* "%s%t"
 *mode-line-timeout* 1
 *mode-line-position* :top
 *mode-line-foreground-color* "#CCCCCC"
 *mode-line-background-color* "#4E4E4E"
 *mode-line-border-color* "#4E4E4E"
 *screen-mode-line-format*
 (list "[%g] %W"                             ; [Groups] Windows
       "^>"                                  ; align remaining on the right
       "%C"                                  ; CPU
       " | %M"                               ; Memory
       " | NET:  " '(:eval (get-wifi))       ; WiFi
       " dBm | VOL:  " '(:eval (get-volume)) ; Volume
       " | %d"))                             ; Time

(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

;;
;; Keybindings ----------------------------------------------------------------
;;

(defcommand firefox () ()
  "run firefox"
  (run-or-raise "firejail firefox" '(:class "Firefox")))
  
(defcommand thunderbird () ()
  "run thunderbird"
  (run-or-raise "firejail thunderbird" '(:class "Thunderbird")))

(defcommand terminal-emulator () ()
  "run terminal emulator"
  (run-or-raise "alacritty" '(:class "Alacritty")))
  
(defcommand lock-screen () ()
  "run xscreensaver-command"
  (run-shell-command "xscreensaver-command -lock"))

(defcommand password-manager () ()
  "run pass"
  (pass:pass-copy-menu))

(defcommand tile-reveal () ()
  "stumpwm:expose but without final selection"
  (expose-tile nil (current-group)))

(define-key *root-map* (kbd ".") "tile-reveal")
(define-key *root-map* (kbd "s-f") "firefox")
(define-key *root-map* (kbd "s-t") "thunderbird")
(define-key *root-map* (kbd "s-RET") "terminal-emulator")
(define-key *root-map* (kbd "s-l") "lock-screen")
(define-key *root-map* (kbd "s-p") "password-manager")

;;
;; Remappings -----------------------------------------------------------------
;;

(define-remapped-keys
    '(("(Firefox|Thunderbird)"
       ("M-w" . "C-c")
       ("C-w" . "C-x")
       ("C-y" . "C-v"))))

;;
;; Hooks ----------------------------------------------------------------------
;;

(defun mode-line-scroll-groups (mode-line button x y)
  "Scrolling in the modeline cycles through groups"
  (declare (ignore mode-line x y))
  (cond
    ((= button 4) (gnext))
    ((= button 5) (gprev))))

(add-hook *mode-line-click-hook* 'mode-line-scroll-groups)
